<?php
// ; $Id: map.info,v 1 2011/04/01 02:04:11 sun Exp $

/**
 * @file
 * Ajoute la liste des cartes
 */

/**
 * Implementation of hook_perm().
 */
function map_perm() {
	return array('access map');
}

/*
 * Implementation of hook_menu
 */
function map_menu() {
	global $language;
	$items = array();
	$map = variable_get('map_titre', array('fr' => 'Cartes', 'en' => 'Maps'));
	
	$items['map'] = array(
		'title' => $map[$language->language],
		'page callback' => 'map_liste_des_cartes',
		'access callback' => TRUE,
		'type' => MENU_CALLBACK,
	);

	return $items;
}

/*
 * Implementation of hook_form_alter
 * Cache le titre des blocs map (remplacé par le champ $form['map'])
 */
function map_form_alter(&$form, &$form_state, $form_id) {
	switch ($form_id) {
		case 'block_admin_configure':
			if($form['delta']['#value'] == 'map') {
				unset($form['block_settings']['title']);				
			}
		break;
	}
}

/*
 * Implementation of hook_block
 */
function map_block($op = 'list', $delta = 0, $edit = array()) {
	
	global $language;

    switch ($op) {
		case 'list':
			$blocks['map'] = array(
				'info' => t('Maps'),
				'status' => 1,
				'region' => 'footer',
			);
			return $blocks;
		break;
		
		case 'configure':
			$map = variable_get('map_titre', array());
			$form['map_fr'] = array(
				'#type' => 'textfield',
				'#title' => t('Block title in french'),
				'#default_value' => $map['fr'],
			);
			$form['map_en'] = array(
				'#type' => 'textfield',
				'#title' => t('Block title in english'),
				'#default_value' => $map['en'],
			);
			return $form;
			
		break;
		
		case 'save':
			$map = array();
			$map['fr'] = $edit['map_fr'];
			$map['en'] = $edit['map_en'];
			variable_set('map_titre', $map);
		break;
		
		case 'view':
			switch ($delta) {
				case 'map':
					
					$map = variable_get('map_titre', array('fr' => 'Cartes', 'en' => 'Maps'));
					
					$subject = l($map[$language->language], 'map');
						
					if ($language->language == 'fr') {
						$id_taxo = 7;
					} else {
						$id_taxo = 13;
					}

					$tree = taxonomy_get_tree($id_taxo, $parent = 0, $depth = -1, $max_depth = NULL);
					
					$count = 0;
					$items = array();
					$footerMaxLignes = variable_get('footerMaxLignes', 5);
					foreach ($tree as $term) {
						if ($count < $footerMaxLignes) {
							//On affiche la taxonomie uniquement si elle possède des contenus.
							$q = ' SELECT count(N.nid) 
									FROM {term_node} AS TN, {node} AS N
									WHERE N.nid = TN.nid
										AND N.status = %d
										AND TN.tid = %d ';
							$r = db_query($q, 1, $term->tid);
						
							if ($term->depth == 0 && db_result($r) > 0) {
								$items[] = l($term->name, 'map/'.strtolower($term->name));
								$count++;
							}
						}
					}
					
					$content = theme_item_list($items, $title = NULL, $type = 'ul');
					
					$block['subject'] = $subject;
					$block['content'] =	$content;
 
				break;
			}
			return $block;

		break;
	}
}

/**
* Construit l'arbre de taxonomie
*/
function map_constructTax($tree = array(), $parent = 0, $tree_temp = array()) 
{
	global $language;
	
	if ($language->language == 'fr') {
		$id_taxo = 7;
	} else {
		$id_taxo = 13;
	}

	if (!$tree) {
		$tree = taxonomy_get_tree($id_taxo, $parent = 0, $depth = -1, $max_depth = NULL);
	}
	
	$terms = array();

	foreach ($tree as $term) {
		if ($term->parents[0] == $parent) {
		
			$terms[$term->tid] = array(
				'name' => $term->name,
				'cartes' => array(),
				'list' => '',
				'count' => 0
			);
			
			$q = ' SELECT N.nid 
					FROM {term_node} AS TN, {node} AS N
					WHERE N.nid = TN.nid
						AND N.status = %d
						AND TN.tid = %d 
						ORDER BY N.sticky DESC ';
			$r = db_query($q, 1, $term->tid);
			
			while($row = db_fetch_array($r)){
				$terms[$term->tid]['cartes'][] = $row['nid'];
			}
			
			/* On intègre les thèmes directement ici */
			if(count($terms[$term->tid]['cartes']) > 0) {
				$items = array();
				$count = 0;
				foreach ($terms[$term->tid]['cartes'] as $nid) {
					$c  = node_load(array('nid' => $nid));
					if ($c->field_code_map[0]['value'] != '') {
						$code_map = str_replace('>Agrandir le plan', ' target="_blank">Agrandir le plan', $c->field_code_map[0]['value']);
						$t = '<div class="map-code">'.$code_map.'</div>';
					} else {
						$code_image = theme_image($c->field_image_map[0]['filepath'], $c->field_image_map[0]['data']['alt'], $c->field_image_map[0]['data']['title'], '', false);
						$t = '<div class="map-image">'.$code_image.'</div>';
					}
					$d = '<div class="map-autre">
						<h3>'.$c->title.'</h3>
						<div class="map-description">'.$c->body.'</div>
					</div>';
					if($count%2 == 0){
						$items[] = array( 'data' => $t.$d, 'class' => 'even map clearfix' );
					}else{
						$items[] = array( 'data' => $t.$d, 'class' => 'odd map clearfix' );
					}
					$count++;
				}
				$list = theme_item_list($items, $title = NULL, $type = 'ul');
				$terms[$term->tid]['list'] = $list;
				$terms[$term->tid]['count'] = $count;
			}
			
		} else {
			$tree_temp[$term->parents[0]][$term->tid] = $term;
		}
	}
	
	if (is_array($terms)) {
		foreach ($terms as $tid => &$term) {
			if (isset($tree_temp[$tid])) {
				$term['children'] = map_constructTax($tree_temp[$tid], $tid, $tree_temp);
			}
		}
	}
	
	if ($parent) {
		return $terms;
	}
	
	return $terms;
}

/**
* Construit la liste des cartes
*/
function map_liste_des_cartes($term = NULL)
{
	global $language;
	menu_cache_clear('primary');
	drupal_add_js("misc/collapse.js", 'core');
	
	$taxContent = map_constructTax();

	if($term){
		foreach($taxContent as $value) {
			if(strtolower($value['name']) == $term){
				$inter = theme_liste_carte($value, 1, '');
				$content .= $inter['content'];
			}else{
				$inter = theme_liste_carte($value);
				$content .= $inter['content'];
			}
		}
	}else{
		foreach($taxContent as $value) {
			$inter = theme_liste_carte($value);
			$content .= $inter['content'];
		}
	}
	
	$map = variable_get('map_titre', array('fr' => 'Cartes', 'en' => 'Maps'));
	$title = $map[$language->language];
	$page_content = theme('liste_des_cartes', $content, $title);
	
	return $page_content;	
}

/**
 * Implementation of hook_theme().
 */
function map_theme($existing, $type, $theme, $path) {
	return array(
		'liste_des_cartes' => array(
			'template' => 'liste-des-cartes',
			'arguments' => array('content' => NULL, 'title' => NULL)
		)
	);
}

/**
*Génère le thème pour  "map" 
*/
function theme_liste_carte($value, $niv = 1, $collapsed = 'collapsed')
{
	//fieldset Value
	if(count($value['children'])) {
		foreach($value['children'] as $children) {
			$inter = theme_liste_carte($children, $niv + 1);
			$theme .= $inter['content'];
			$value['count'] += $inter['count'];
		}
		$fieldsetValue = $value['list'].$theme;
	} else {
		$fieldsetValue = $value['list'];
	}

	//fieldset Name
	if($value['count'] > 0) {
		$number = '&nbsp;('.$value['count'].' ';
		$value['count'] > 1 ? $number .= t('maps').')' : $number .= t('map').')';
		$fieldsetTitle = $value['name'].$number;
	} else {
		$fieldsetTitle = $value['name'];
		return;
	}
	

	$h = $niv + 1;
	$content = '<div class="niveau'.$niv.' listesp collapsible collapsed clearfix">';
   $content .= '<h'.$h.'>'.$value['name'].$number.'</h'.$h.'>';
	$content .= $fieldsetValue;
	$content .= '</div>';	
	
	return array('content' => $content, 'count' => $value['count']);
}

